{"version":3,"file":"app~a51fa3f5.bundle.js","mappings":";0YACA,ouNAIA,IAAQA,EAAuDC,EAAAA,EAAAA,cAAxCC,EAAwCD,EAAAA,EAAAA,iBAAtBE,EAAsBF,EAAAA,EAAAA,kBAEzDG,GAAYC,EAAAA,EAAAA,IAAOL,EAAeE,EAAkB,CACxDI,QAAO,SAACC,GACNA,EAASC,kBAAkBL,EAAmB,CAAEM,QAAS,MAC3D,IAwBF,QArB8B,CACtBC,cAAa,SAACC,GAAI,oGACjBA,EAAI,CAAF,gEAGOP,EAAS,uCAAEQ,IAAIT,EAAmBQ,IAAE,0CAJ5B,EAKxB,EACME,iBAAgB,WAAG,iHACTT,EAAS,uCAAEU,OAAOX,IAAiB,0CAD1B,EAEzB,EACMY,cAAa,SAACC,GAAY,oGACzBA,EAAWC,eAAe,MAAO,CAAF,gEAGtBb,EAAS,uCAAEc,IAAIf,EAAmBa,IAAU,0CAJ5B,EAKhC,EACMG,iBAAgB,SAACR,GAAI,iHACXP,EAAS,8CAASD,EAAmBQ,IAAE,0CAD5B,EAE3B,gDCxBF,QALqB,CACnBS,KAAM,GAAF,OAAKnB,EAAAA,EAAAA,SAAe,SACxBoB,OAAQ,SAACV,GAAE,gBAAQV,EAAAA,EAAAA,SAAe,mBAAWU,EAAE,sPCHjD,04NAeA,QAdsB,yBADtB,4FACsB,SADtB,UAMG,EALmB,EAWnB,OAZH,EACsB,EADtB,EACsB,KADtB,EACsB,4CACpB,sGACyBW,MAAMC,EAAAA,MAAkB,OAAjC,OAARC,EAAW,EAAH,cACaA,EAASC,OAAM,OAAxB,OAAZC,EAAe,EAAH,uBACXA,EAAaC,aAAW,2CAChC,0FAED,WAA8BhB,GAAE,yFACPW,MAAMC,EAAAA,OAAoBZ,IAAI,OAAvC,OAARa,EAAW,EAAH,cACaA,EAASC,OAAM,OAAxB,OAAZC,EAAe,EAAH,uBACXA,EAAaV,YAAU,2CAC/B,+CAZH,iFAYG,EAXmB,mCCStB,QAXe,CACbY,IAAK,eACLC,SAAU,sCACVC,eAAgB,qDAChBC,iBAAkB,QAClBC,WAAY,yBACZhC,cAAe,gCACfE,iBAAkB,EAClBC,kBAAmB,iECHf8B,EAAYC,SAASC,cAAc,cACnCC,EAAUF,SAASC,cAAc,aAEvCF,EAAUI,iBAAiB,SAAS,SAACC,GACnCA,EAAMC,iBACgB,KAAlBD,EAAME,SACRN,SAASC,cAAc,cAAcM,OAEzC,IAEAR,EAAUI,iBAAiB,SAAS,WAClCJ,EAAUS,UAAUC,OAAO,UAC3BP,EAAQM,UAAUC,OAAO,SAC3B,IAEAT,SAASU,iBAAiB,aAAaC,SAAQ,SAACC,GAAC,OAAKA,EAAET,iBAAiB,SAAS,WAChFJ,EAAUS,UAAUK,OAAO,UAC3BX,EAAQM,UAAUK,OAAO,SAC3B,GAAE,IAEF,IAAMC,EAAM,IAAIC,EAAAA,EAAI,CAClBC,OAAQhB,SAASC,cAAc,cAC/BgB,OAAQjB,SAASC,cAAc,WAC/BiB,QAASlB,SAASC,cAAc,kBAGlCkB,OAAOhB,iBAAiB,cAAc,WACpCW,EAAIM,YACN,IAEAD,OAAOhB,iBAAiB,QAAQ,WAC9BW,EAAIM,cACJC,EAAAA,EAAAA,IACF","sources":["webpack://restaurant-apps/./src/scripts/data/favorite-restaurant-idb.js","webpack://restaurant-apps/./src/scripts/global/api-endpoint.js","webpack://restaurant-apps/./src/scripts/data/restaurant-source.js","webpack://restaurant-apps/./src/scripts/global/config.js","webpack://restaurant-apps/./src/scripts/index.js"],"sourcesContent":["/* eslint-disable no-prototype-builtins */\n/* eslint-disable consistent-return */\nimport { openDB } from 'idb';\nimport CONFIG from '../global/config';\n\nconst { DATABASE_NAME, DATABASE_VERSION, OBJECT_STORE_NAME } = CONFIG;\n\nconst dbPromise = openDB(DATABASE_NAME, DATABASE_VERSION, {\n  upgrade(database) {\n    database.createObjectStore(OBJECT_STORE_NAME, { keyPath: 'id' });\n  },\n});\n\nconst FavoriteRestaurantIdb = {\n  async getRestaurant(id) {\n    if (!id) {\n      return;\n    }\n    return (await dbPromise).get(OBJECT_STORE_NAME, id);\n  },\n  async getAllRestaurant() {\n    return (await dbPromise).getAll(OBJECT_STORE_NAME);\n  },\n  async putRestaurant(restaurant) {\n    if (!restaurant.hasOwnProperty('id')) {\n      return;\n    }\n    return (await dbPromise).put(OBJECT_STORE_NAME, restaurant);\n  },\n  async deleteRestaurant(id) {\n    return (await dbPromise).delete(OBJECT_STORE_NAME, id);\n  },\n};\n\nexport default FavoriteRestaurantIdb;\n","import CONFIG from './config';\n\nconst API_ENDPOINT = {\n  LIST: `${CONFIG.BASE_URL}/list`,\n  DETAIL: (id) => `${CONFIG.BASE_URL}/detail/${id}`,\n};\n\nexport default API_ENDPOINT;\n","import API_ENDPOINT from '../global/api-endpoint';\n\nclass RestaurantSource {\n  static async ListRestaurant() {\n    const response = await fetch(API_ENDPOINT.LIST);\n    const responseJson = await response.json();\n    return responseJson.restaurants;\n  }\n\n  static async DetailRestaurant(id) {\n    const response = await fetch(API_ENDPOINT.DETAIL(id));\n    const responseJson = await response.json();\n    return responseJson.restaurant;\n  }\n}\n\nexport default RestaurantSource;\n","const CONFIG = {\n  KEY: 'YOUR_API_KEY',\n  BASE_URL: 'https://restaurant-api.dicoding.dev',\n  BASE_IMAGE_URL: 'https://restaurant-api.dicoding.dev/images/medium/',\n  DEFAULT_LANGUAGE: 'en-us',\n  CACHE_NAME: 'RestaurantCatalogue-V1',\n  DATABASE_NAME: 'restaurant-catalogue-database',\n  DATABASE_VERSION: 1,\n  OBJECT_STORE_NAME: 'restaurants',\n};\n\nexport default CONFIG;\n","import 'regenerator-runtime'; /* for async await transpile */\nimport '../styles/main.css';\nimport App from './views/app';\nimport swRegister from './utils/sw-register';\n\nconst hamburger = document.querySelector('.hamburger');\nconst navMenu = document.querySelector('.nav-menu');\n\nhamburger.addEventListener('keyup', (event) => {\n  event.preventDefault();\n  if (event.keyCode === 13) {\n    document.querySelector('.hamburger').click();\n  }\n});\n\nhamburger.addEventListener('click', () => {\n  hamburger.classList.toggle('active');\n  navMenu.classList.toggle('active');\n});\n\ndocument.querySelectorAll('.nav-link').forEach((n) => n.addEventListener('click', () => {\n  hamburger.classList.remove('active');\n  navMenu.classList.remove('active');\n}));\n\nconst app = new App({\n  button: document.querySelector('.hamburger'),\n  drawer: document.querySelector('.navbar'),\n  content: document.querySelector('#mainContent'),\n});\n\nwindow.addEventListener('hashchange', () => {\n  app.renderPage();\n});\n\nwindow.addEventListener('load', () => {\n  app.renderPage();\n  swRegister();\n});\n"],"names":["DATABASE_NAME","CONFIG","DATABASE_VERSION","OBJECT_STORE_NAME","dbPromise","openDB","upgrade","database","createObjectStore","keyPath","getRestaurant","id","get","getAllRestaurant","getAll","putRestaurant","restaurant","hasOwnProperty","put","deleteRestaurant","LIST","DETAIL","fetch","API_ENDPOINT","response","json","responseJson","restaurants","KEY","BASE_URL","BASE_IMAGE_URL","DEFAULT_LANGUAGE","CACHE_NAME","hamburger","document","querySelector","navMenu","addEventListener","event","preventDefault","keyCode","click","classList","toggle","querySelectorAll","forEach","n","remove","app","App","button","drawer","content","window","renderPage","swRegister"],"sourceRoot":""}